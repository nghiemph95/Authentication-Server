const core = require('./core');

module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ...core.parserOptions,
    project: 'tsconfig.json',
    sourceType: 'module',
    ecmaFeatures: {
      legacyDecorators: true,
    },
  },
  env: core.env,
  plugins: [...core.plugins, '@typescript-eslint/eslint-plugin'],
  extends: [...core.extends, 'plugin:@typescript-eslint/recommended', 'plugin:import/typescript'],
  rules: {
    ...core.rules,
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-unused-expressions': 'off',
    '@typescript-eslint/no-unused-vars': 'warn',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/ban-types': 'warn',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'function',
        format: ['camelCase'],
      },
      {
        selector: 'parameter',
        format: ['camelCase'],
        leadingUnderscore: 'allow',
      },
      {
        selector: 'classProperty',
        format: ['camelCase'],
      },
      {
        selector: 'objectLiteralProperty',
        format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
        leadingUnderscore: 'allow',
      },
      {
        selector: 'typeProperty',
        format: ['camelCase'],
        leadingUnderscore: 'allow',
      },
      {
        selector: 'parameterProperty',
        format: ['camelCase'],
      },
      {
        selector: 'classMethod',
        format: ['camelCase'],
      },
      {
        selector: 'objectLiteralMethod',
        format: ['camelCase', 'PascalCase'],
      },
      {
        selector: 'typeMethod',
        format: ['camelCase'],
      },
      {
        selector: 'accessor',
        format: ['camelCase'],
      },
      {
        selector: 'enumMember',
        format: ['camelCase', 'PascalCase'],
      },
      {
        selector: 'class',
        format: ['PascalCase'],
      },
      {
        selector: 'interface',
        format: ['PascalCase'],
        prefix: ['I'],
      },
      {
        selector: 'typeAlias',
        format: ['PascalCase'],
        prefix: ['T'],
      },
      {
        selector: 'enum',
        format: ['PascalCase'],
        suffix: ['Enum'],
      },
      {
        selector: 'typeParameter',
        format: ['PascalCase'],
      },
    ],
  },
};
